{"ast":null,"code":"var _jsxFileName = \"/Users/selena/readinglist/client/src/components/Home.js\";\nimport React, { Component, KeyboardEvent } from 'react';\nimport axios from 'axios';\nimport BookGrid from \"./grid/BookGrid\";\nimport BookCard from \"./grid/BookCard\";\nimport Search from './Search';\n\nclass Home extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      myBooks: [],\n      searchQuery: \"empty\"\n    };\n\n    this.getInitialBookList = () => {\n      fetch('https://www.googleapis.com/books/v1/users/105309221066047026022/bookshelves/1001/volumes').then(response => response.json()).then(response => {\n        //console.log(data)\n        const bookList = [];\n\n        for (var i = 0; i < response.data.items.length; i++) {\n          const bookItem = {\n            id: response.data.items[i].id,\n            title: response.data.items[i].volumeInfo.title,\n            author: response.data.items[i].volumeInfo.authors,\n            description: response.data.items[i].volumeInfo.description,\n            img: response.data.items[i].volumeInfo.imageLinks.thumbnail\n          };\n          bookList.push(bookItem);\n        }\n      });\n    };\n\n    this.performSearch = (event, searchQuery) => {\n      if (event.key === 'Enter') {\n        axios.get('https://www.googleapis.com/books/v1/volumes?q=' + searchQuery).then(response => {\n          const bookList = [];\n\n          for (var i = 0; i < response.data.items.length; i++) {\n            //let imageUrl = URL.createObjectURL(response.data.items[i].volumeInfo.previewLink);\n            const bookItem = {\n              id: response.data.items[i].id,\n              title: response.data.items[i].volumeInfo.title,\n              author: response.data.items[i].volumeInfo.authors,\n              description: response.data.items[i].volumeInfo.description,\n              img: response.data.items[i].volumeInfo.imageLinks.thumbnail\n            };\n            bookList.push(bookItem);\n          }\n\n          this.setState({\n            myBooks: bookList\n          });\n        }).catch(function (error) {\n          console.log(error);\n        }); //console.log(searchQuery);\n      }\n    };\n  }\n\n  /*\n      console.log(response.json());\n      const bookList = [];\n      for(var i=0; i < response.data.items.length; i++){\n        const bookItem = {\n          id: response.data.items[i].id,\n          title: response.data.items[i].volumeInfo.title,\n          author: response.data.items[i].volumeInfo.authors,\n          description: response.data.items[i].volumeInfo.description,\n          img: response.data.items[i].volumeInfo.imageLinks.thumbnail\n        }\n        bookList.push(bookItem);\n      }\n      console.log(bookList);\n      */\n  componentDidMount() {\n    this.getInitialBookList();\n    /*\n    axios.get('https://www.googleapis.com/books/v1/users/105309221066047026022/bookshelves/1001/volumes')\n      .then((response) => {\n         const bookList = [];\n        for(var i=0; i < response.data.items.length; i++){\n          //let imageUrl = URL.createObjectURL(response.data.items[i].volumeInfo.previewLink);\n          const bookItem = {\n            id: response.data.items[i].id,\n            title: response.data.items[i].volumeInfo.title,\n            author: response.data.items[i].volumeInfo.authors,\n            description: response.data.items[i].volumeInfo.description,\n            img: response.data.items[i].volumeInfo.imageLinks.thumbnail\n          }\n          bookList.push(bookItem);\n        }\n        this.setState({myBooks: bookList});\n         console.log(response);\n      })\n      .catch(function (error){\n        console.log(error);\n        //console.log(\"fail\");\n      })\n      */\n  } //document.getElementbyId\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      performSearch: this.performSearch,\n      searchQuery: this.state.searchQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(BookGrid, {\n      cols: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }\n    }, this.state.myBooks.map((bookItem, i) => /*#__PURE__*/React.createElement(BookCard, {\n      title: bookItem.title,\n      id: bookItem.id,\n      author: bookItem.author,\n      img: bookItem.img,\n      description: bookItem.description,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/selena/readinglist/client/src/components/Home.js"],"names":["React","Component","KeyboardEvent","axios","BookGrid","BookCard","Search","Home","state","myBooks","searchQuery","getInitialBookList","fetch","then","response","json","bookList","i","data","items","length","bookItem","id","title","volumeInfo","author","authors","description","img","imageLinks","thumbnail","push","performSearch","event","key","get","setState","catch","error","console","log","componentDidMount","render","map"],"mappings":"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","sourcesContent":["import React, {Component, KeyboardEvent} from 'react';\nimport axios from 'axios';\nimport BookGrid from \"./grid/BookGrid\";\nimport BookCard from \"./grid/BookCard\";\nimport Search from './Search';\n\nclass Home extends Component{\n  state = {\n    myBooks: [],\n    searchQuery: \"empty\"\n  }\n  getInitialBookList = () => {\n  fetch('https://www.googleapis.com/books/v1/users/105309221066047026022/bookshelves/1001/volumes')\n  .then(response => response.json())\n  .then((response) => {\n    //console.log(data)\n    const bookList = [];\n    for(var i=0; i < response.data.items.length; i++){\n      const bookItem = {\n        id: response.data.items[i].id,\n        title: response.data.items[i].volumeInfo.title,\n        author: response.data.items[i].volumeInfo.authors,\n        description: response.data.items[i].volumeInfo.description,\n        img: response.data.items[i].volumeInfo.imageLinks.thumbnail\n      }\n      bookList.push(bookItem);\n    }\n  });\n };\n\n/*\n    console.log(response.json());\n    const bookList = [];\n    for(var i=0; i < response.data.items.length; i++){\n      const bookItem = {\n        id: response.data.items[i].id,\n        title: response.data.items[i].volumeInfo.title,\n        author: response.data.items[i].volumeInfo.authors,\n        description: response.data.items[i].volumeInfo.description,\n        img: response.data.items[i].volumeInfo.imageLinks.thumbnail\n      }\n      bookList.push(bookItem);\n    }\n    console.log(bookList);\n    */\n\n\n  componentDidMount(){\n    this.getInitialBookList();\n    /*\n    axios.get('https://www.googleapis.com/books/v1/users/105309221066047026022/bookshelves/1001/volumes')\n      .then((response) => {\n\n        const bookList = [];\n        for(var i=0; i < response.data.items.length; i++){\n          //let imageUrl = URL.createObjectURL(response.data.items[i].volumeInfo.previewLink);\n          const bookItem = {\n            id: response.data.items[i].id,\n            title: response.data.items[i].volumeInfo.title,\n            author: response.data.items[i].volumeInfo.authors,\n            description: response.data.items[i].volumeInfo.description,\n            img: response.data.items[i].volumeInfo.imageLinks.thumbnail\n          }\n          bookList.push(bookItem);\n        }\n        this.setState({myBooks: bookList});\n\n        console.log(response);\n      })\n      .catch(function (error){\n        console.log(error);\n        //console.log(\"fail\");\n      })\n      */\n  }\n\n  //document.getElementbyId\n  performSearch = (event: KeyboardEvent<HTMLInputElement>, searchQuery ) => {\n    if(event.key === 'Enter'){\n\n      axios.get('https://www.googleapis.com/books/v1/volumes?q='+searchQuery)\n      .then((response) => {\n        const bookList = [];\n        for(var i=0; i < response.data.items.length; i++){\n          //let imageUrl = URL.createObjectURL(response.data.items[i].volumeInfo.previewLink);\n          const bookItem = {\n            id: response.data.items[i].id,\n            title: response.data.items[i].volumeInfo.title,\n            author: response.data.items[i].volumeInfo.authors,\n            description: response.data.items[i].volumeInfo.description,\n            img: response.data.items[i].volumeInfo.imageLinks.thumbnail\n          }\n          bookList.push(bookItem);\n        }\n        this.setState({myBooks: bookList});\n      })\n      .catch(function (error){\n        console.log(error);\n      })\n          //console.log(searchQuery);\n    }\n  }\n  render (){\n    return (\n      <div className=\"container\">\n        <Search performSearch={this.performSearch} searchQuery={this.state.searchQuery}/>\n        <BookGrid cols={3}>\n        {\n          this.state.myBooks.map((bookItem, i) => (\n            <BookCard title={bookItem.title} id={bookItem.id} author={bookItem.author} img={bookItem.img} description={bookItem.description} key={i}/>\n          ))}\n        </BookGrid>\n      </div>\n    )\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}