{"ast":null,"code":"var _jsxFileName = \"/Users/selena/readinglist/client/src/components/Explore.js\";\nimport React, { Component, KeyboardEvent } from 'react';\nimport axios from 'axios';\nimport BookGrid from \"./grid/BookGrid\";\nimport BookCard from \"./grid/BookCard\";\nimport Search from './Search';\n\nclass Explore extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: \"\",\n      myBooks: [],\n      searchQuery: \"empty\"\n    };\n\n    this.getInitialBookList = () => {\n      fetch('https://www.googleapis.com/books/v1/users/105309221066047026022/bookshelves/1001/volumes').then(response => response.json()).then(responsedata => {\n        //  console.log(responsedata.items);\n        const bookList = [];\n\n        for (var i = 0; i < responsedata.items.length; i++) {\n          const bookItem = {\n            id: responsedata.items[i].id,\n            //how I will save users books in db.\n            title: responsedata.items[i].volumeInfo.title,\n            author: responsedata.items[i].volumeInfo.authors,\n            description: responsedata.items[i].volumeInfo.description,\n            img: responsedata.items[i].volumeInfo.imageLinks.thumbnail\n          };\n          bookList.push(bookItem);\n        } //console.log(bookList);\n\n\n        this.setState({\n          myBooks: bookList\n        });\n      }).catch(function (error) {\n        console.log(error); //console.log(\"fail\");\n      });\n    };\n\n    this.performSearch = (event, searchQuery) => {\n      if (event.key === 'Enter') {\n        fetch('https://www.googleapis.com/books/v1/volumes?q=' + searchQuery).then(response => response.json()).then(responsedata => {\n          console.log(responsedata.items);\n          const bookList = [];\n\n          for (var i = 0; i < responsedata.items.length; i++) {\n            const bookItem = {\n              id: responsedata.items[i].id,\n              title: responsedata.items[i].volumeInfo.title,\n              author: responsedata.items[i].volumeInfo.authors,\n              description: responsedata.items[i].volumeInfo.description,\n              img: responsedata.items[i].volumeInfo.imageLinks.thumbnail\n            };\n            bookList.push(bookItem);\n          } //console.log(bookList);\n\n\n          this.setState({\n            myBooks: bookList\n          });\n        }).catch(function (error) {\n          console.log(error); //console.log(\"fail\");\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getInitialBookList();\n    this.setState({\n      user: this.props.user\n    });\n  } //document.getElementbyId\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Search, {\n      performSearch: this.performSearch,\n      searchQuery: this.state.searchQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, \" Hello \", this.state.user), /*#__PURE__*/React.createElement(BookGrid, {\n      cols: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, this.state.myBooks.map((bookItem, i) => /*#__PURE__*/React.createElement(BookCard, {\n      title: bookItem.title,\n      id: bookItem.id,\n      author: bookItem.author,\n      img: bookItem.img,\n      description: bookItem.description,\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default Explore;","map":{"version":3,"sources":["/Users/selena/readinglist/client/src/components/Explore.js"],"names":["React","Component","KeyboardEvent","axios","BookGrid","BookCard","Search","Explore","state","user","myBooks","searchQuery","getInitialBookList","fetch","then","response","json","responsedata","bookList","i","items","length","bookItem","id","title","volumeInfo","author","authors","description","img","imageLinks","thumbnail","push","setState","catch","error","console","log","performSearch","event","key","componentDidMount","props","render","map"],"mappings":"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","sourcesContent":["import React, {Component, KeyboardEvent} from 'react';\nimport axios from 'axios';\nimport BookGrid from \"./grid/BookGrid\";\nimport BookCard from \"./grid/BookCard\";\nimport Search from './Search';\n\nclass Explore extends Component{\n  state = {\n    user: \"\",\n    myBooks: [],\n    searchQuery: \"empty\"\n  }\n  getInitialBookList = () => {\n  fetch('https://www.googleapis.com/books/v1/users/105309221066047026022/bookshelves/1001/volumes')\n    .then(response => response.json())\n    .then((responsedata) => {\n    //  console.log(responsedata.items);\n      const bookList = [];\n      for(var i=0; i < responsedata.items.length; i++){\n        const bookItem = {\n          id: responsedata.items[i].id, //how I will save users books in db.\n          title: responsedata.items[i].volumeInfo.title,\n          author: responsedata.items[i].volumeInfo.authors,\n          description: responsedata.items[i].volumeInfo.description,\n          img: responsedata.items[i].volumeInfo.imageLinks.thumbnail\n        }\n        bookList.push(bookItem);\n      }\n      //console.log(bookList);\n      this.setState({myBooks: bookList});\n    }).catch(function (error){\n      console.log(error);\n    //console.log(\"fail\");\n  });\n };\n componentDidMount(){\n    this.getInitialBookList();\n    this.setState({user: this.props.user});\n  }\n\n  //document.getElementbyId\n  performSearch = (event: KeyboardEvent<HTMLInputElement>, searchQuery ) => {\n    if(event.key === 'Enter'){\n       fetch('https://www.googleapis.com/books/v1/volumes?q='+searchQuery)\n        .then(response => response.json())\n        .then((responsedata) => {\n            console.log(responsedata.items);\n            const bookList = [];\n            for(var i=0; i < responsedata.items.length; i++){\n              const bookItem = {\n                id: responsedata.items[i].id,\n                title: responsedata.items[i].volumeInfo.title,\n                author: responsedata.items[i].volumeInfo.authors,\n                description: responsedata.items[i].volumeInfo.description,\n                img: responsedata.items[i].volumeInfo.imageLinks.thumbnail\n              }\n              bookList.push(bookItem);\n            }\n            //console.log(bookList);\n            this.setState({myBooks: bookList});\n         }).catch(function (error){\n            console.log(error);\n            //console.log(\"fail\");\n        });\n    }\n  }\n  render (){\n    return (\n      <div className=\"container\">\n        <Search performSearch={this.performSearch} searchQuery={this.state.searchQuery}/>\n        <h1> Hello {this.state.user}</h1>\n        <BookGrid cols={3}>\n        {\n          this.state.myBooks.map((bookItem, i) => (\n            <BookCard title={bookItem.title} id={bookItem.id} author={bookItem.author} img={bookItem.img} description={bookItem.description} key={i}/>\n          ))}\n        </BookGrid>\n      </div>\n    )\n  }\n}\n\nexport default Explore;\n"]},"metadata":{},"sourceType":"module"}